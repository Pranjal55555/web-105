Q1. Write a C++ program to overload unary operators that is increment and decrement
ans:

#include<iostream>
#include<conio.h>
using namespace std;
class incdec
{
        int a, b;
     public:
        void accept()
        {
                cout<<"\n Enter Two Numbers : \n";
                cout<<" ";
                cin>>a;
                cout<<" ";
                cin>>b;
        }
        void operator--()
        {
                a--;
                b--;
        }
        void operator++()
        {
                a++;
                b++;
        }
        void display()
        {
                cout<<"\n A : "<<a;
                cout<<"\n B : "<<b;
        }
};
int main()
{
        incdec id;
        id.accept();
        --id;
        cout<<"\n After Decrementing : ";
        id.display();
        ++id;
        ++id;
        cout<<"\n\n After Incrementing : ";
        id.display();
        return 0;
}


Q2. Write a C++ program to overload binary operator ‘+’ to add two complex numbers.
ans:

#include<iostream>
#include<conio.h>
using namespace std;
class over
{
        int a, b;
    public:
        void accept()
        {
                cout<<"\n Enter Two over Numbers : ";
                cin>>a>>b;
        }
        over operator+(over obj)   
        {
                over c;
                c.a=a+obj.a;
                c.b=b+obj.b;
                return(c);
        }
        void display()
        {
                cout<<a<<"+"<<b<<"i"<<"\n";
        }
};
int main()
{
        over a1, b1, sum;  
        a1.accept();  
        b1.accept();
        sum = a1+b1; 
        cout<<"\n Entered Values : \n";
        cout<<"\t";
        a1.display();
        cout<<"\t";
        b1.display();
        cout<<"\n Addition of Real and Imaginary Numbers : \n";
        cout<<"\t";
        sum.display();
        return 0;
}


Q3. Write a C++ program to add two complex numbers using operator overloaded by a 
friend function.
ans:

#include<iostream>
#include<conio.h>
using namespace std;
class ocomp
{
        int a, b;
        public:
        void accept()
        {
                cout<<"\n Enter Values : ";
                cin>>a>>b;
        }
        friend ocomp operator+(ocomp x, ocomp y);                     
        void display()
        {
                cout<<a<<"+"<<b<<"i"<<"\n";
        }
};
ocomp operator+(ocomp x, ocomp y)
{
        ocomp c;
        c.a=x.a+y.a;
        c.b=x.b+y.b;
        return(c);
}
int main()
{
        ocomp x,y, sum;      
        x.accept();
        y.accept();
        sum = x+y;
        cout<<"\n Entered Values : \n";
        cout<<"\t";
        x.display();
        cout<<"\t";
        y.display();  
        cout<<"\n Addition is : \n";
        cout<<"\t";
        sum.display();     
        return 0;
}


Q4,5. Create a class Time which contains:
- Hours
- Minutes
- Seconds
Write a C++ program using operator overloading for the following:
a. ==: To check whether two Times are same or not.
b. >>: to accept the time
c. <<: To display the time.

ans:

#include<iostream>
#include<conio.h>
using namespace std;
class Time
{
        private:
                int hours, minutes, seconds;
        public:
                Time()
                {
                        hours=minutes=seconds=0;
                }
                friend int operator>>(istream &input, Time &t)
                {
                        cout<<"\n Enter Hours   :  ";
                        input>>t.hours;
                        cout<<"\n Enter Minutes :  ";
                        input>>t.minutes;
                        cout<<"\n Enter Seconds :  ";
                        input>>t.seconds;
                        t.minutes = t.minutes + t.seconds / 60;
                        t.seconds %= 60;
                        t.hours = t.hours + t.minutes / 60;
                        t.minutes %= 60;
                        if(t.hours >= 25)
                                return 1;
                        else
                                return 0;
                }
                friend void operator<<(ostream &Output, Time &t)
                {
                        Output<<"\n Hours   :  "<<t.hours;
                        Output<<"\n Minutes :  "<<t.minutes;
                        Output<<"\n Seconds :  "<<t.seconds;
                }
                int operator==(Time t1)   
                {
                        int tot = hours * 3600 + minutes * 60 + seconds;
                        int tot1 = t1.hours * 3600 + t1.minutes * 60 + t1.seconds;
                        if(tot==tot1)
                                return 1;
                        else
                                return 0;
                }
                
                ~Time(){};
                
};

int main()
{
        Time t, t1;
        cout<<"\n Enter First Time ";
        cout<<"\n -------------------- ";
        if(cin>>t)
        {
                cout<<"\n Invalid Time ";
                return 0;
        }
        cout<<"\n First Time ";
        cout<<t;
        cout<<"\n\n Enter Second Time ";
        cout<<"\n -------------------- ";
        if(cin>>t1)
        {
                cout<<"\n Invalid Time ";
                return 0;
        }
        cout<<"\n Second Time ";
        cout<<t1;
        if(t==t1)
                cout<<"\n\n Times are Same ";
        else
                cout<<"\n\n Times are Different ";
        return 0;
}


Q6. Write C++ program to read and print student’s information using two classes and 
single inheritance.
ans:

#include<iostream>
#include<conio.h>
#include<string>
using namespace std;
class stud{
private:
    string stu_name, stu_address;
    int rollno, std;
public:
    void stu_det()
    {
        cout<<"Enter Full Name :"<<endl;
        getline(cin,stu_name);
        cout<<"Enter Roll Number :"<<endl;
        cin>>rollno;        
        cout<<"Enter Standard :"<<endl;
        cin>>std;
        cout<<"Enter Address :"<<endl;
        getline(cin,stu_address);  
        return 0;
    }
    void stu_info()
    {
        cout<<"Full Name: "<<stu_name<<endl;
        cout<<"Roll Number: "<<rollno<<endl;
        cout<<"Standard: "<<std<<endl;
        cout<<"Address: "<<stu_address<<endl;
        return 0;
    }
};
int main()
{
    stud details;
    cout << ":::::: Enter student details ::::::" << endl;
    details.stu_det();
    cout << ":::::: Student Details ::::::" << endl;
    details.stu_info();
    return 0;
}


Q7. write C++ program to read and print employee information using multiple 
inheritance.
ans:

#include<iostream>
#include<conio.h>
#include<string>
using namespace std;
class Employee
 {
     private:
     string empname[3];
     int empid[3];
     int empsal[3];
     public:
     void read_data();
     void print_data();  
 };
 void Employee::read_data()
 {
     for (int i=0; i<3;i++)     
    {         
         cout<<"Enter the Employee Name : ";         
         getline(cin,empname[i]);
         cout<<"Enter the Employee ID : ";         
         cin>>empid[i];
         cout<<"Enter the Employee salary : ";         
         cin>>empsal[i];
     }
 }
 void Employee::print_data()
 {
     for (int i=0; i<3;i++)
     {
         cout<<empname[i]<<endl;
         cout<<empid[i]<<"\t"<<empsal[i]<<endl;
     }
 }
 int main()
 {
     Employee emp;
     emp.read_data();
     cout<<endl<<"Employee Information is: "<<endl;
     cout<<"EmpID\tEMP Salary"<<endl;
     emp.print_data();
 }


Q8. Write C++ program to demonstrate example of hierarchical inheritance to get 
square and cube of a number
ans:

#include<iostream> 
#include<conio.h>
using namespace std;
class one{
    public:
 	int x;
 	void getdata()
 	{
   	    cout <<"\nEnter Value of x :\n"; 
   	    cin>>x;
 	}
};

class two : public one
{
    public:
 	void square()
 	{
 	    cout << "\nSquare= " << x * x;
 	}
};
class three : public one
{
    public:
 	void cube()
 	{
        cout << "\nCube= " << x * x * x;
 	}
};

int main()
{
    
    two a1;          
    three a2;
    a1.getdata();
    a1.square();
    a2.getdata();
    a2.cube();
    return 0;

} 
